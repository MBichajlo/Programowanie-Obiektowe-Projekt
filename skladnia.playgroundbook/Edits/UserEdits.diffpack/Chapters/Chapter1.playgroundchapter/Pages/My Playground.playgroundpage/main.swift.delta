<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit

let devices: [String: String]=[
    "phone":"iPhone X",
    "laptop":"2020 MacBook Air",
    "tablet":"2020 iPad Air",
    ]
print(devices["phone"])

func printInstructorsName(name: String){
    print(name)
}
var name="Pawe≈Ç"

printInstructorsName(name: name)
func add(firstNumber: Int, secondNumber: Int)-&gt; Int{
    let sum=firstNumber+secondNumber
    return sum
}
print(add(firstNumber: 4,secondNumber: 5))

var isDarkModeOn=true
if isDarkModeOn{
    print("To dobrze")
}else{
    print("Nie dobrze")
}

let allStars=["James","davis","Harden","Doncic","Leonard"]
//for player in allStars where player=="Harden"{
//    print(player)
//}
for i in 0..&lt;25{
    print(i)
}

var randomInts: [Int]=[]
for i in 0..&lt;25{
    let randomNumber=Int.random(in: 0...100)
    randomInts.append(randomNumber)
}
print(randomInts)

enum Phone: String{
    case iPhone11Pro = "Great"
    case iPhoneSE = "Less great"
    case Pixel = "Android"
    case Nokia = "Classic"
}

func getSeansOpinion(phone: Phone){
    if phone == .iPhone11Pro{
        print("Great")
    }else if phone == .iPhoneSE{
        print("Less great")
    }else if phone == .Pixel{
        print("Android")
    }else{
        print("Classic")
    }
}
getSeansOpinion(phone: .iPhone11Pro)

func getPawelsOpinion(phone: Phone){
    print(phone.rawValue)
}

getPawelsOpinion(phone: .Pixel)

func switchOpinion(phone: Phone){
    switch phone {
    case .iPhone11Pro:
        print(phone.rawValue)
    case .iPhoneSE:
        print(phone.rawValue)
    case .Nokia:
        print(phone.rawValue)
    case .Pixel:
        print(phone.rawValue)
    }
}

switchOpinion(phone: .Nokia)

let matchmakingRank = 5000
func determinePlayerLeauge(rank: Int){
    switch rank{
    case 0:
        print("Play")
    case 1..&lt;50:
        print("Bronze")
    case 50..&lt;100:
        print("Silver")
    case 100..&lt;200:
        print("Gold")
    default:
        print("God")
    }
}
determinePlayerLeauge(rank: matchmakingRank)

let x: Double = 55
let y: Double = 88
let sum = x/y

let agesYoung = [3,6,9]
let agesOld = [99,67]
let allAges = agesYoung+agesOld
print(allAges)

    //How to unwrap a nil

var ages: [Int]=[]
ages.sort()//if let
if let oldestAge = ages.last{
    print("The oldest age is\(oldestAge)")
}else{
    print("Pusta tablica")
}
//nil coalescing
let oldestAge1 = ages.last ?? 999

//guard statement
func getOldestAge(){
    guard let oldestAge = ages.last else{
        return
    }
    print("\(oldestAge) is the oldest age")
}

//force unwrap
let oldestAge=ages.last!
</string>
			<key>ModifiedRange</key>
			<string>{1, 2540}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
